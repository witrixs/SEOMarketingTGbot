from __future__ import annotations

from typing import Optional, List, Dict, Set

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


def admin_main_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="admin:create_post")
    kb.button(text="üóÇ –ü–æ—Å—Ç—ã", callback_data="admin:list_posts")
    kb.button(text="üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="admin:list_schedules")
    kb.button(text="üåê –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="admin:global_link")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
    kb.adjust(2, 2, 1)
    return kb.as_markup()


def back_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    return kb.as_markup()


def stats_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:stats_refresh")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    kb.adjust(1, 1)
    return kb.as_markup()


def post_actions_kb(post_id: int, back_page: Optional[int] = None) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"post:preview:{post_id}")
    kb.button(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post:publish:{post_id}")
    kb.button(text="üïí –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post:schedule:{post_id}")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"post:delete:{post_id}")
    if back_page is not None:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"post:back_to_list:{back_page}")
        kb.adjust(2, 2, 1)
    else:
        kb.adjust(2, 2)
    return kb.as_markup()


def schedule_repeat_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞", callback_data="repeat:none")
    kb.button(text="–ö–∞–∂–¥—ã–π 1—á", callback_data="repeat:3600")
    kb.button(text="–ö–∞–∂–¥—ã–µ 3—á", callback_data="repeat:10800")
    kb.button(text="–ö–∞–∂–¥—ã–µ 6—á", callback_data="repeat:21600")
    kb.button(text="–ö–∞–∂–¥—ã–µ 12—á", callback_data="repeat:43200")
    kb.button(text="–ö–∞–∂–¥—ã–µ 24—á", callback_data="repeat:86400")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    kb.adjust(2, 2, 2, 1)
    return kb.as_markup()


def post_link_kb(url: Optional[str]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if url:
        kb.button(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=url)
    return kb.as_markup()


def schedule_mode_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –¥–Ω—è–º", callback_data="sched:mode:weekly")
    kb.button(text="–û–¥–∏–Ω —Ä–∞–∑/–ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É", callback_data="sched:mode:oneoff")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    kb.adjust(1, 1, 1)
    return kb.as_markup()


def weekly_days_kb(selected_days: Optional[Set[int]] = None) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    selected_days = selected_days or set()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
    for i, day_name in enumerate(["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]):
        if i in selected_days:
            kb.button(text=f"‚úÖ {day_name}", callback_data=f"wday:{i}")
        else:
            kb.button(text=f"‚¨ú {day_name}", callback_data=f"wday:{i}")
    
    kb.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="wday:done")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    kb.adjust(7, 2)
    return kb.as_markup()


def posts_page_kb(posts: List[Dict], page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for p in posts:
        kb.button(text=f"–û—Ç–∫—Ä—ã—Ç—å ID {p['id']}", callback_data=f"admin:open_post:{p['id']}:{page}")
    if has_prev:
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin:list_posts:page:{page-1}")
    if has_next:
        kb.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin:list_posts:page:{page+1}")
    kb.button(text="‚óÄÔ∏è –ú–µ–Ω—é", callback_data="admin:back")
    kb.adjust(2)
    return kb.as_markup() 